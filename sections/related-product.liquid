<style>
  .related_products {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 40px;
  }
</style>


<div class="">
  <div class="">
    <h2 class="font-bebas text-mdew text-4xl mb-5">{{ section.settings.related_product_title }}</h2>

    <div class="related_products">
    </div>
  </div>
</div>


{% if cart.item_count > 0 %}
  {% assign relatedId = cart.items[0].product_id %}
{% else %}
  {% assign relatedId = 8359966572854 %}
{% endif %}

<script>
  function formatMoney(cents, format) {
    if (typeof cents == 'string') { cents = cents.replace('.',''); }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = (format || this.money_format);

    function defaultOption(opt, def) {
      return (typeof opt == 'undefined' ? def : opt);
    }

    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal   = defaultOption(decimal, '.');

      if (isNaN(number) || number == null) { return 0; }

      number = (number/100.0).toFixed(precision);

      var parts   = number.split('.'),
          dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
          cents   = parts[1] ? (decimal + parts[1]) : '';

      return dollars + cents;
    }

    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }

    return formatString.replace(placeholderRegex, value);
  };


  function buildBlock(product) {
    const formattedPrice = formatMoney(product.price, "{{ shop.money_format }}")
  
    const html = `
      <a class="related-product" href="${product.url}">
        <img src="${product.images[0]}" />
        <h3>${product.title}</h3>
        <span>${formattedPrice}</span>
        <form method="post" action="/cart/add">
          <input name="id" type="hidden" value="${product.variants[0].id}" />
          <button type="submit">Add to cart</button>
        </form>
      </a>
    `
  
    return html
  }


    fetch(window.Shopify.routes.root + "recommendations/products.json?product_id={{ relatedId }}&limit=4")
    .then(response => response.json())
    .then(({products}) => {
      products.forEach(product => {
        const html = buildBlock(product)
        document.querySelector('.related_products').innerHTML += html
      })
    }
  );
</script>

{% schema %}
  {
    "name": "Related Products",
    "settings": [
      {
        "type": "text",
        "id": "related_product_title",
        "label": "Title",
        "default": "Related Products"
      }
    ],
    "presets": [
      {
        "name": "Related Products"
      }
    ]
  }
{% endschema %}